import pytest
from serial.serialutil import SerialException


from app import droneStatus


class FakeTCP:
    """
    Context manager that replaces the mavlink mavtcp recv_match method in `droneStatus.drone.master` with one that raises a
    `serial.serialutils.SerialException`. Use if you want to simulate a serial issue for a unit test.
    """

    @staticmethod
    def recv_match_override(
        condition=None, type=None, blocking=False, timeout=None
    ) -> None:
        raise SerialException(
            "Test SerialException generated by tests.FakeTCP context manager."
        )

    def __enter__(self) -> None:
        # Replace drone mavtcp recv_match function with one that raises SerialException
        if droneStatus.drone is not None:
            self.old_recv = droneStatus.drone.master.recv_match
            droneStatus.drone.master.recv_match = FakeTCP.recv_match_override

    def __exit__(self, type, value, traceback) -> None:
        # Reset recv_match method
        if droneStatus.drone is not None:
            droneStatus.drone.master.recv_match = self.old_recv


@pytest.fixture
def gps_failure():
    """Fixture to use when you want the test being ran to simulate a GPS system failure.

    TODO: This does not work for some reason. Fix?
    """
    droneStatus.drone.logger.info("Enabling SIM_GPS_DISABLE")
    droneStatus.drone.master.param_set_send("SIM_GPS_DISABLE", 1.0, 2)
    droneStatus.drone.master.param_set_send("SIM_GPS2_DISABLE", 1.0, 2)

    yield

    droneStatus.drone.logger.info("Disabling SIM_GPS_DISABLE")
    droneStatus.drone.master.param_set_send("SIM_GPS_DISABLE", 0.0, 2)
    droneStatus.drone.master.param_set_send("SIM_GPS2_DISABLE", 0.0, 2)
